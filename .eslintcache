[{"C:\\Users\\00095981\\react projects\\authentication\\src\\index.js":"1","C:\\Users\\00095981\\react projects\\authentication\\src\\App.js":"2","C:\\Users\\00095981\\react projects\\authentication\\src\\pages\\AuthPage.js":"3","C:\\Users\\00095981\\react projects\\authentication\\src\\pages\\HomePage.js":"4","C:\\Users\\00095981\\react projects\\authentication\\src\\components\\Layout\\Layout.js":"5","C:\\Users\\00095981\\react projects\\authentication\\src\\components\\Profile\\UserProfile.js":"6","C:\\Users\\00095981\\react projects\\authentication\\src\\components\\Layout\\MainNavigation.js":"7","C:\\Users\\00095981\\react projects\\authentication\\src\\components\\Auth\\AuthForm.js":"8","C:\\Users\\00095981\\react projects\\authentication\\src\\components\\Profile\\ProfileForm.js":"9","C:\\Users\\00095981\\react projects\\authentication\\src\\components\\StartingPage\\StartingPageContent.js":"10","C:\\Users\\00095981\\react projects\\authentication\\src\\store\\loginContext.js":"11"},{"size":355,"mtime":1637632872967,"results":"12","hashOfConfig":"13"},{"size":888,"mtime":1638844647128,"results":"14","hashOfConfig":"13"},{"size":130,"mtime":1637558649004,"results":"15","hashOfConfig":"13"},{"size":171,"mtime":1637558648977,"results":"16","hashOfConfig":"13"},{"size":246,"mtime":1637558648707,"results":"17","hashOfConfig":"13"},{"size":278,"mtime":1637558648887,"results":"18","hashOfConfig":"13"},{"size":1136,"mtime":1638252481646,"results":"19","hashOfConfig":"13"},{"size":1981,"mtime":1638844052966,"results":"20","hashOfConfig":"13"},{"size":969,"mtime":1638844065713,"results":"21","hashOfConfig":"13"},{"size":240,"mtime":1637558648799,"results":"22","hashOfConfig":"13"},{"size":5737,"mtime":1638845617314,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1g61sit",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"C:\\Users\\00095981\\react projects\\authentication\\src\\index.js",[],["48","49"],"C:\\Users\\00095981\\react projects\\authentication\\src\\App.js",[],"C:\\Users\\00095981\\react projects\\authentication\\src\\pages\\AuthPage.js",[],"C:\\Users\\00095981\\react projects\\authentication\\src\\pages\\HomePage.js",[],"C:\\Users\\00095981\\react projects\\authentication\\src\\components\\Layout\\Layout.js",[],"C:\\Users\\00095981\\react projects\\authentication\\src\\components\\Profile\\UserProfile.js",[],"C:\\Users\\00095981\\react projects\\authentication\\src\\components\\Layout\\MainNavigation.js",[],"C:\\Users\\00095981\\react projects\\authentication\\src\\components\\Auth\\AuthForm.js",[],"C:\\Users\\00095981\\react projects\\authentication\\src\\components\\Profile\\ProfileForm.js",[],"C:\\Users\\00095981\\react projects\\authentication\\src\\components\\StartingPage\\StartingPageContent.js",[],"C:\\Users\\00095981\\react projects\\authentication\\src\\store\\loginContext.js",["50"],"import { createContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst LoginCnxt = createContext({\r\n  isLoading: false,\r\n  isLogin: false,\r\n  userIsLoggedIn: false,\r\n  errormessage: \"\",\r\n  userToken: \"\",\r\n  error: false,\r\n  authHandler: () => {},\r\n  switchAuthModeHandler: () => {},\r\n  logoutHandler: () => {},\r\n  changePasswordHandler: () => {},\r\n});\r\nconst calculateRemainingTime = (expirationTime) => {\r\n  // expirationTime is passed as string\r\n  const currentTime = new Date().getTime(); // to get the current time\r\n  const adjustedExpirationTime = new Date(expirationTime).getTime(); // expirationTime is converted to Date type\r\n  const remaininDuration = adjustedExpirationTime - currentTime;\r\n  return remaininDuration; // the remaining duration is returned in milliseconds\r\n};\r\n\r\nexport const LogInContextProvider = (props) => {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [errormessage, setErrorMessage] = useState(\"Authentication failed\");\r\n  let tokenData = localStorage.getItem(\"userToken\");\r\n  const storedExpirationTIme = localStorage.getItem(\"expirationTime\");\r\n  const remainingTime = calculateRemainingTime(storedExpirationTIme);\r\n  let initialToken;\r\n  if (remainingTime < 0) {\r\n    localStorage.removeItem(\"expirationTime\"); //this happens if the token is expired; so let's remove info from local storage\r\n    localStorage.removeItem(\"userToken\");\r\n  } else {\r\n    initialToken = tokenData; //if stored token is valid, we store it in initialToken which activates useEffect function below\r\n  }\r\n  const [userToken, setUserToken] = useState(initialToken); // lets store the token from the browser memory if still available\r\n  const [error, setError] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const switchAuthModeHandler = () => {\r\n    setIsLogin((prevState) => !prevState);\r\n  };\r\n  const logoutHandler = () => {\r\n    setUserToken(null);\r\n    localStorage.removeItem(\"userToken\");\r\n    localStorage.removeItem(\"expirationTime\"); //to remove the expiration time from the browser. This variable has to be a string\r\n  };\r\n  const loginHandler = (token, expirationTime) => {\r\n    setUserToken(token);\r\n    localStorage.setItem(\"userToken\", token);\r\n    localStorage.setItem(\"expirationTime\", expirationTime); //to store the expiration time in the browser, has to be string\r\n    const remainingTime = calculateRemainingTime(expirationTime);\r\n    setTimeout(logoutHandler, remainingTime);\r\n\r\n    history.replace(\"/auth\");\r\n  };\r\n\r\n  const authHandler = (crdentials) => {\r\n    let url;\r\n    isLogin\r\n      ? (url =\r\n          \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyACotLOIsZTWkiya4tEAbvtkjhdrwvtUKQ\")\r\n      : (url =\r\n          \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyACotLOIsZTWkiya4tEAbvtkjhdrwvtUKQ\");\r\n\r\n    setIsLoading(true);\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        email: crdentials.enteredUsername,\r\n        password: crdentials.enteredPassword,\r\n        returnSecureToken: true,\r\n      }),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    })\r\n      .then(async (res) => {\r\n        setIsLoading(false);\r\n        const data = await res.json();\r\n        if (res.ok) {\r\n          setError(false);\r\n          const expirationTime = new Date(\r\n            new Date().getTime() + +data.expiresIn * 1000 //data.expiresIn is string in seconds, so we convert it into number and multiply by 1000 to get miliseconds\r\n          );\r\n          loginHandler(data.idToken, expirationTime.toISOString()); // we pass the expirationTime as string because we convert it to date type in calculateRemainingTime\r\n        } else {\r\n          throw new Error(data.error.message || \"Authentication failed\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setError(true);\r\n        setErrorMessage(error.message);\r\n      });\r\n  };\r\n\r\n  const changePasswordHandler = (newPassword) => {\r\n    if (!userToken) {\r\n      setError(true);\r\n      setErrorMessage(\"Password cannot change if the user is not logged in\");\r\n      return;\r\n    }\r\n    let url =\r\n      \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyACotLOIsZTWkiya4tEAbvtkjhdrwvtUKQ\";\r\n\r\n    setIsLoading(true);\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        idToken: userToken,\r\n        password: newPassword,\r\n        returnSecureToken: false,\r\n      }),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    })\r\n      .then(async (res) => {\r\n        setIsLoading(false);\r\n        const data = await res.json();\r\n        if (res.ok) {\r\n          setError(false);\r\n          setUserToken(data.idToken);\r\n          history.replace(\"/\");\r\n        } else {\r\n          throw new Error(data.error.message || \"Authentication failed\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setError(true);\r\n        setErrorMessage(error.message);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setTimeout(logoutHandler, remainingTime); // we have to do this inside useEffect becase logoutHandler function is defined after where we have initialToken = tokenData;\r\n  }, [initialToken]);\r\n\r\n  const context = {\r\n    isLoading: isLoading,\r\n    isLogin: isLogin,\r\n    userIsLoggedIn: !!userToken,\r\n    errormessage: errormessage,\r\n    userToken: userToken,\r\n    error: error,\r\n    authHandler: authHandler,\r\n    switchAuthModeHandler: switchAuthModeHandler,\r\n    logoutHandler: logoutHandler,\r\n    changePasswordHandler: changePasswordHandler,\r\n  };\r\n\r\n  return (\r\n    <LoginCnxt.Provider value={context}>{props.children}</LoginCnxt.Provider>\r\n  );\r\n};\r\nexport default LoginCnxt;\r\n",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":135,"column":6,"nodeType":"57","endLine":135,"endColumn":20,"suggestions":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'remainingTime'. Either include it or remove the dependency array.","ArrayExpression",["61"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},"Update the dependencies array to be: [initialToken, remainingTime]",{"range":"64","text":"65"},[5229,5243],"[initialToken, remainingTime]"]